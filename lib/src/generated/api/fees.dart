// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'fees.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `into`, `into`, `into`, `into`, `into`, `try_into`, `try_into`, `try_into`

@freezed
class ChainFeesAndLimits with _$ChainFeesAndLimits {
  const factory ChainFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required ChainSwapFees btcFees,
    required ChainSwapFees lbtcFees,
  }) = _ChainFeesAndLimits;
}

@freezed
class ChainSwapFees with _$ChainSwapFees {
  const factory ChainSwapFees({
    required double percentage,
    required BigInt userLockup,
    required BigInt userClaim,
    required BigInt server,
  }) = _ChainSwapFees;
}

@freezed
class Fees with _$Fees {
  const Fees._();
  const factory Fees({
    required String boltzUrl,
  }) = _Fees;
  Future<ChainFeesAndLimits> chain() =>
      BoltzCore.instance.api.crateApiFeesFeesChain(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Fees> newInstance({required String boltzUrl}) =>
      BoltzCore.instance.api.crateApiFeesFeesNew(boltzUrl: boltzUrl);

  Future<ReverseFeesAndLimits> reverse() =>
      BoltzCore.instance.api.crateApiFeesFeesReverse(
        that: this,
      );

  Future<SubmarineFeesAndLimits> submarine() =>
      BoltzCore.instance.api.crateApiFeesFeesSubmarine(
        that: this,
      );
}

@freezed
class MinerFees with _$MinerFees {
  const factory MinerFees({
    required BigInt lockup,
    required BigInt claim,
  }) = _MinerFees;
}

@freezed
class RevSwapFees with _$RevSwapFees {
  const factory RevSwapFees({
    required double percentage,
    required MinerFees minerFees,
  }) = _RevSwapFees;
}

@freezed
class ReverseFeesAndLimits with _$ReverseFeesAndLimits {
  const factory ReverseFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required RevSwapFees btcFees,
    required RevSwapFees lbtcFees,
  }) = _ReverseFeesAndLimits;
}

@freezed
class SubSwapFees with _$SubSwapFees {
  const factory SubSwapFees({
    required double percentage,
    required BigInt minerFees,
  }) = _SubSwapFees;
}

@freezed
class SubmarineFeesAndLimits with _$SubmarineFeesAndLimits {
  const factory SubmarineFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required SubSwapFees btcFees,
    required SubSwapFees lbtcFees,
  }) = _SubmarineFeesAndLimits;
}

@freezed
class SwapLimits with _$SwapLimits {
  const factory SwapLimits({
    required BigInt minimal,
    required BigInt maximal,
  }) = _SwapLimits;
}
