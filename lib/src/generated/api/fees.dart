// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'fees.freezed.dart';

@freezed
class ChainFeesAndLimits with _$ChainFeesAndLimits {
  const factory ChainFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required ChainSwapFees btcFees,
    required ChainSwapFees lbtcFees,
  }) = _ChainFeesAndLimits;
}

@freezed
class ChainSwapFees with _$ChainSwapFees {
  const factory ChainSwapFees({
    required double percentage,
    required int userLockup,
    required int userClaim,
    required int server,
  }) = _ChainSwapFees;
}

@freezed
class Fees with _$Fees {
  const Fees._();
  const factory Fees({
    required String boltzUrl,
  }) = _Fees;
  Future<ChainFeesAndLimits> chain({dynamic hint}) =>
      BoltzCore.instance.api.feesChain(that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Fees> newInstance({required String boltzUrl, dynamic hint}) =>
      BoltzCore.instance.api.feesNew(boltzUrl: boltzUrl, hint: hint);

  Future<ReverseFeesAndLimits> reverse({dynamic hint}) =>
      BoltzCore.instance.api.feesReverse(that: this, hint: hint);

  Future<SubmarineFeesAndLimits> submarine({dynamic hint}) =>
      BoltzCore.instance.api.feesSubmarine(that: this, hint: hint);
}

@freezed
class MinerFees with _$MinerFees {
  const factory MinerFees({
    required int lockup,
    required int claim,
  }) = _MinerFees;
}

@freezed
class RevSwapFees with _$RevSwapFees {
  const factory RevSwapFees({
    required double percentage,
    required MinerFees minerFees,
  }) = _RevSwapFees;
}

@freezed
class ReverseFeesAndLimits with _$ReverseFeesAndLimits {
  const factory ReverseFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required RevSwapFees btcFees,
    required RevSwapFees lbtcFees,
  }) = _ReverseFeesAndLimits;
}

@freezed
class SubSwapFees with _$SubSwapFees {
  const factory SubSwapFees({
    required double percentage,
    required int minerFees,
  }) = _SubSwapFees;
}

@freezed
class SubmarineFeesAndLimits with _$SubmarineFeesAndLimits {
  const factory SubmarineFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required SubSwapFees btcFees,
    required SubSwapFees lbtcFees,
  }) = _SubmarineFeesAndLimits;
}

@freezed
class SwapLimits with _$SwapLimits {
  const factory SwapLimits({
    required int minimal,
    required int maximal,
  }) = _SwapLimits;
}
