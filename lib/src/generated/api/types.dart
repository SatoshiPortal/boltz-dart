// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'types.freezed.dart';

@freezed
class BtcSwapScriptStr with _$BtcSwapScriptStr {
  const BtcSwapScriptStr._();
  const factory BtcSwapScriptStr.raw({
    required SwapType swapType,
    String? fundingAddrs,
    required String hashlock,
    required String receiverPubkey,
    required int locktime,
    required String senderPubkey,
  }) = _BtcSwapScriptStr;
  factory BtcSwapScriptStr(
          {required SwapType swapType,
          String? fundingAddrs,
          required String hashlock,
          required String receiverPubkey,
          required int locktime,
          required String senderPubkey,
          dynamic hint}) =>
      BoltzCore.instance.api.btcSwapScriptStrNew(
          swapType: swapType,
          fundingAddrs: fundingAddrs,
          hashlock: hashlock,
          receiverPubkey: receiverPubkey,
          locktime: locktime,
          senderPubkey: senderPubkey,
          hint: hint);
}

enum Chain {
  bitcoin,
  bitcoinTestnet,
  liquid,
  liquidTestnet,
}

@freezed
class ChainFeesAndLimits with _$ChainFeesAndLimits {
  const factory ChainFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required ChainSwapFees btcFees,
    required ChainSwapFees lbtcFees,
  }) = _ChainFeesAndLimits;
}

enum ChainSwapDirection {
  btcToLbtc,
  lbtcToBtc,
}

@freezed
class ChainSwapFees with _$ChainSwapFees {
  const factory ChainSwapFees({
    required double percentage,
    required int userLockup,
    required int userClaim,
    required int server,
  }) = _ChainSwapFees;
}

@freezed
class DecodedInvoice with _$DecodedInvoice {
  const DecodedInvoice._();
  const factory DecodedInvoice({
    required int msats,
    required int expiry,
    required int expiresIn,
    required int expiresAt,
    required bool isExpired,
    required String network,
    required int cltvExpDelta,
    String? bip21,
    required String preimageHash,
  }) = _DecodedInvoice;

  /// Add boltz_url & chain for route hint check
  static Future<DecodedInvoice> fromString(
          {required String s, String? boltzUrl, dynamic hint}) =>
      BoltzCore.instance.api
          .decodedInvoiceFromString(s: s, boltzUrl: boltzUrl, hint: hint);
}

@freezed
class KeyPair with _$KeyPair {
  const KeyPair._();
  const factory KeyPair.raw({
    required String secretKey,
    required String publicKey,
  }) = _KeyPair;
  static Future<KeyPair> generate(
          {required String mnemonic,
          required Chain network,
          required int index,
          required SwapType swapType,
          dynamic hint}) =>
      BoltzCore.instance.api.keyPairGenerate(
          mnemonic: mnemonic,
          network: network,
          index: index,
          swapType: swapType,
          hint: hint);

  factory KeyPair(
          {required String secretKey,
          required String publicKey,
          dynamic hint}) =>
      BoltzCore.instance.api
          .keyPairNew(secretKey: secretKey, publicKey: publicKey, hint: hint);
}

@freezed
class LBtcSwapScriptStr with _$LBtcSwapScriptStr {
  const LBtcSwapScriptStr._();
  const factory LBtcSwapScriptStr.raw({
    required SwapType swapType,
    String? fundingAddrs,
    required String hashlock,
    required String receiverPubkey,
    required int locktime,
    required String senderPubkey,
    required String blindingKey,
  }) = _LBtcSwapScriptStr;
  factory LBtcSwapScriptStr(
          {required SwapType swapType,
          String? fundingAddrs,
          required String hashlock,
          required String receiverPubkey,
          required int locktime,
          required String senderPubkey,
          required String blindingKey,
          dynamic hint}) =>
      BoltzCore.instance.api.lBtcSwapScriptStrNew(
          swapType: swapType,
          fundingAddrs: fundingAddrs,
          hashlock: hashlock,
          receiverPubkey: receiverPubkey,
          locktime: locktime,
          senderPubkey: senderPubkey,
          blindingKey: blindingKey,
          hint: hint);
}

@freezed
class MinerFees with _$MinerFees {
  const factory MinerFees({
    required int lockup,
    required int claim,
  }) = _MinerFees;
}

@freezed
class PreImage with _$PreImage {
  const PreImage._();
  const factory PreImage.raw({
    required String value,
    required String sha256,
    required String hash160,
  }) = _PreImage;
  static Future<PreImage> generate({dynamic hint}) =>
      BoltzCore.instance.api.preImageGenerate(hint: hint);

  factory PreImage(
          {required String value,
          required String sha256,
          required String hash160,
          dynamic hint}) =>
      BoltzCore.instance.api.preImageNew(
          value: value, sha256: sha256, hash160: hash160, hint: hint);
}

@freezed
class RevSwapFees with _$RevSwapFees {
  const factory RevSwapFees({
    required double percentage,
    required MinerFees minerFees,
  }) = _RevSwapFees;
}

@freezed
class ReverseFeesAndLimits with _$ReverseFeesAndLimits {
  const factory ReverseFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required RevSwapFees btcFees,
    required RevSwapFees lbtcFees,
  }) = _ReverseFeesAndLimits;
}

@freezed
class SubSwapFees with _$SubSwapFees {
  const factory SubSwapFees({
    required double percentage,
    required int minerFees,
  }) = _SubSwapFees;
}

@freezed
class SubmarineFeesAndLimits with _$SubmarineFeesAndLimits {
  const factory SubmarineFeesAndLimits({
    required SwapLimits btcLimits,
    required SwapLimits lbtcLimits,
    required SubSwapFees btcFees,
    required SubSwapFees lbtcFees,
  }) = _SubmarineFeesAndLimits;
}

@freezed
class SwapLimits with _$SwapLimits {
  const factory SwapLimits({
    required int minimal,
    required int maximal,
  }) = _SwapLimits;
}

enum SwapType {
  submarine,
  reverse,
  chain,
}
