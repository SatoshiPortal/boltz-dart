// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'types.dart';
part 'btc_ln.freezed.dart';

@freezed
class BtcLnSwap with _$BtcLnSwap {
  const BtcLnSwap._();
  const factory BtcLnSwap({
    required String id,
    required SwapType kind,
    required Chain network,
    required KeyPair keys,
    required int keyIndex,
    required PreImage preimage,
    required BtcSwapScriptStr swapScript,
    required String invoice,
    required String scriptAddress,
    required int outAmount,
    required String electrumUrl,
    required String boltzUrl,
    String? referralId,
  }) = _BtcLnSwap;
  Future<String> broadcastBoltz({required String signedHex, dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapBroadcastBoltz(
          that: this, signedHex: signedHex, hint: hint);

  Future<String> broadcastLocal({required String signedHex, dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapBroadcastLocal(
          that: this, signedHex: signedHex, hint: hint);

  Future<String> claim(
          {required String outAddress,
          required int absFee,
          required bool tryCooperate,
          dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapClaim(
          that: this,
          outAddress: outAddress,
          absFee: absFee,
          tryCooperate: tryCooperate,
          hint: hint);

  Future<void> coopCloseSubmarine({dynamic hint}) => BoltzCore.instance.api
      .btcLnSwapCoopCloseSubmarine(that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<BtcLnSwap> newInstance(
          {required String id,
          required SwapType kind,
          required Chain network,
          required KeyPair keys,
          required int keyIndex,
          required PreImage preimage,
          required BtcSwapScriptStr swapScript,
          required String invoice,
          required String scriptAddress,
          required int outAmount,
          required String electrumUrl,
          required String boltzUrl,
          String? referralId,
          dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapNew(
          id: id,
          kind: kind,
          network: network,
          keys: keys,
          keyIndex: keyIndex,
          preimage: preimage,
          swapScript: swapScript,
          invoice: invoice,
          scriptAddress: scriptAddress,
          outAmount: outAmount,
          electrumUrl: electrumUrl,
          boltzUrl: boltzUrl,
          referralId: referralId,
          hint: hint);

  static Future<BtcLnSwap> newReverse(
          {required String mnemonic,
          required int index,
          required int outAmount,
          String? outAddress,
          required Chain network,
          required String electrumUrl,
          required String boltzUrl,
          String? referralId,
          dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapNewReverse(
          mnemonic: mnemonic,
          index: index,
          outAmount: outAmount,
          outAddress: outAddress,
          network: network,
          electrumUrl: electrumUrl,
          boltzUrl: boltzUrl,
          referralId: referralId,
          hint: hint);

  static Future<BtcLnSwap> newSubmarine(
          {required String mnemonic,
          required int index,
          required String invoice,
          required Chain network,
          required String electrumUrl,
          required String boltzUrl,
          String? referralId,
          dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapNewSubmarine(
          mnemonic: mnemonic,
          index: index,
          invoice: invoice,
          network: network,
          electrumUrl: electrumUrl,
          boltzUrl: boltzUrl,
          referralId: referralId,
          hint: hint);

  Future<String> refund(
          {required String outAddress,
          required int absFee,
          required bool tryCooperate,
          dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapRefund(
          that: this,
          outAddress: outAddress,
          absFee: absFee,
          tryCooperate: tryCooperate,
          hint: hint);

  Future<int> txSize({dynamic hint}) =>
      BoltzCore.instance.api.btcLnSwapTxSize(that: this, hint: hint);
}
