// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'types.dart';
part 'lbtc_ln.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `extract_id`

@freezed
class LbtcLnSwap with _$LbtcLnSwap {
  const LbtcLnSwap._();
  const factory LbtcLnSwap({
    required String id,
    required SwapType kind,
    required Chain network,
    required KeyPair keys,
    required int keyIndex,
    required PreImage preimage,
    required LBtcSwapScriptStr swapScript,
    required String invoice,
    required int outAmount,
    required String scriptAddress,
    required String blindingKey,
    required String electrumUrl,
    required String boltzUrl,
    String? referralId,
  }) = _LbtcLnSwap;
  Future<String> broadcastBoltz({required String signedHex}) => BoltzCore
      .instance.api
      .crateApiLbtcLnLbtcLnSwapBroadcastBoltz(that: this, signedHex: signedHex);

  Future<String> broadcastLocal({required String signedHex}) => BoltzCore
      .instance.api
      .crateApiLbtcLnLbtcLnSwapBroadcastLocal(that: this, signedHex: signedHex);

  Future<String> claim(
          {required String outAddress,
          required int absFee,
          required bool tryCooperate}) =>
      BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapClaim(
          that: this,
          outAddress: outAddress,
          absFee: absFee,
          tryCooperate: tryCooperate);

  Future<void> coopCloseSubmarine() =>
      BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapCoopCloseSubmarine(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<LbtcLnSwap> newInstance(
          {required String id,
          required SwapType kind,
          required Chain network,
          required KeyPair keys,
          required int keyIndex,
          required PreImage preimage,
          required LBtcSwapScriptStr swapScript,
          required String invoice,
          required int outAmount,
          required String outAddress,
          required String blindingKey,
          required String electrumUrl,
          required String boltzUrl,
          String? referralId}) =>
      BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapNew(
          id: id,
          kind: kind,
          network: network,
          keys: keys,
          keyIndex: keyIndex,
          preimage: preimage,
          swapScript: swapScript,
          invoice: invoice,
          outAmount: outAmount,
          outAddress: outAddress,
          blindingKey: blindingKey,
          electrumUrl: electrumUrl,
          boltzUrl: boltzUrl,
          referralId: referralId);

  static Future<LbtcLnSwap> newReverse(
          {required String mnemonic,
          required int index,
          required int outAmount,
          String? outAddress,
          required Chain network,
          required String electrumUrl,
          required String boltzUrl,
          String? referralId}) =>
      BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapNewReverse(
          mnemonic: mnemonic,
          index: index,
          outAmount: outAmount,
          outAddress: outAddress,
          network: network,
          electrumUrl: electrumUrl,
          boltzUrl: boltzUrl,
          referralId: referralId);

  static Future<LbtcLnSwap> newSubmarine(
          {required String mnemonic,
          required int index,
          required String invoice,
          required Chain network,
          required String electrumUrl,
          required String boltzUrl,
          String? referralId}) =>
      BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapNewSubmarine(
          mnemonic: mnemonic,
          index: index,
          invoice: invoice,
          network: network,
          electrumUrl: electrumUrl,
          boltzUrl: boltzUrl,
          referralId: referralId);

  Future<String> refund(
          {required String outAddress,
          required int absFee,
          required bool tryCooperate}) =>
      BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapRefund(
          that: this,
          outAddress: outAddress,
          absFee: absFee,
          tryCooperate: tryCooperate);

  Future<int> txSize() => BoltzCore.instance.api.crateApiLbtcLnLbtcLnSwapTxSize(
        that: this,
      );
}
