// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/btc_ln.dart';
import 'api/error.dart';
import 'api/lbtc_ln.dart';
import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class BoltzCoreApiImplPlatform extends BaseApiImpl<BoltzCoreWire> {
  BoltzCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AllFees dco_decode_all_fees(dynamic raw);

  @protected
  BoltzError dco_decode_boltz_error(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  BtcLnV1Swap dco_decode_box_autoadd_btc_ln_v_1_swap(dynamic raw);

  @protected
  BtcLnV2Swap dco_decode_box_autoadd_btc_ln_v_2_swap(dynamic raw);

  @protected
  BtcSwapScriptV2Str dco_decode_box_autoadd_btc_swap_script_v_2_str(
      dynamic raw);

  @protected
  KeyPair dco_decode_box_autoadd_key_pair(dynamic raw);

  @protected
  LBtcSwapScriptV2Str dco_decode_box_autoadd_l_btc_swap_script_v_2_str(
      dynamic raw);

  @protected
  LbtcLnV1Swap dco_decode_box_autoadd_lbtc_ln_v_1_swap(dynamic raw);

  @protected
  LbtcLnV2Swap dco_decode_box_autoadd_lbtc_ln_v_2_swap(dynamic raw);

  @protected
  PreImage dco_decode_box_autoadd_pre_image(dynamic raw);

  @protected
  BtcLnV1Swap dco_decode_btc_ln_v_1_swap(dynamic raw);

  @protected
  BtcLnV2Swap dco_decode_btc_ln_v_2_swap(dynamic raw);

  @protected
  BtcSwapScriptV2Str dco_decode_btc_swap_script_v_2_str(dynamic raw);

  @protected
  Chain dco_decode_chain(dynamic raw);

  @protected
  DecodedInvoice dco_decode_decoded_invoice(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  KeyPair dco_decode_key_pair(dynamic raw);

  @protected
  LBtcSwapScriptV2Str dco_decode_l_btc_swap_script_v_2_str(dynamic raw);

  @protected
  LbtcLnV1Swap dco_decode_lbtc_ln_v_1_swap(dynamic raw);

  @protected
  LbtcLnV2Swap dco_decode_lbtc_ln_v_2_swap(dynamic raw);

  @protected
  Limits dco_decode_limits(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  PreImage dco_decode_pre_image(dynamic raw);

  @protected
  ReverseSwapFees dco_decode_reverse_swap_fees(dynamic raw);

  @protected
  SubmarineSwapFees dco_decode_submarine_swap_fees(dynamic raw);

  @protected
  SwapType dco_decode_swap_type(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AllFees sse_decode_all_fees(SseDeserializer deserializer);

  @protected
  BoltzError sse_decode_boltz_error(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  BtcLnV1Swap sse_decode_box_autoadd_btc_ln_v_1_swap(
      SseDeserializer deserializer);

  @protected
  BtcLnV2Swap sse_decode_box_autoadd_btc_ln_v_2_swap(
      SseDeserializer deserializer);

  @protected
  BtcSwapScriptV2Str sse_decode_box_autoadd_btc_swap_script_v_2_str(
      SseDeserializer deserializer);

  @protected
  KeyPair sse_decode_box_autoadd_key_pair(SseDeserializer deserializer);

  @protected
  LBtcSwapScriptV2Str sse_decode_box_autoadd_l_btc_swap_script_v_2_str(
      SseDeserializer deserializer);

  @protected
  LbtcLnV1Swap sse_decode_box_autoadd_lbtc_ln_v_1_swap(
      SseDeserializer deserializer);

  @protected
  LbtcLnV2Swap sse_decode_box_autoadd_lbtc_ln_v_2_swap(
      SseDeserializer deserializer);

  @protected
  PreImage sse_decode_box_autoadd_pre_image(SseDeserializer deserializer);

  @protected
  BtcLnV1Swap sse_decode_btc_ln_v_1_swap(SseDeserializer deserializer);

  @protected
  BtcLnV2Swap sse_decode_btc_ln_v_2_swap(SseDeserializer deserializer);

  @protected
  BtcSwapScriptV2Str sse_decode_btc_swap_script_v_2_str(
      SseDeserializer deserializer);

  @protected
  Chain sse_decode_chain(SseDeserializer deserializer);

  @protected
  DecodedInvoice sse_decode_decoded_invoice(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  KeyPair sse_decode_key_pair(SseDeserializer deserializer);

  @protected
  LBtcSwapScriptV2Str sse_decode_l_btc_swap_script_v_2_str(
      SseDeserializer deserializer);

  @protected
  LbtcLnV1Swap sse_decode_lbtc_ln_v_1_swap(SseDeserializer deserializer);

  @protected
  LbtcLnV2Swap sse_decode_lbtc_ln_v_2_swap(SseDeserializer deserializer);

  @protected
  Limits sse_decode_limits(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  PreImage sse_decode_pre_image(SseDeserializer deserializer);

  @protected
  ReverseSwapFees sse_decode_reverse_swap_fees(SseDeserializer deserializer);

  @protected
  SubmarineSwapFees sse_decode_submarine_swap_fees(
      SseDeserializer deserializer);

  @protected
  SwapType sse_decode_swap_type(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_btc_ln_v_1_swap> cst_encode_box_autoadd_btc_ln_v_1_swap(
      BtcLnV1Swap raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_btc_ln_v_1_swap();
    cst_api_fill_to_wire_btc_ln_v_1_swap(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_btc_ln_v_2_swap> cst_encode_box_autoadd_btc_ln_v_2_swap(
      BtcLnV2Swap raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_btc_ln_v_2_swap();
    cst_api_fill_to_wire_btc_ln_v_2_swap(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_btc_swap_script_v_2_str>
      cst_encode_box_autoadd_btc_swap_script_v_2_str(BtcSwapScriptV2Str raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_btc_swap_script_v_2_str();
    cst_api_fill_to_wire_btc_swap_script_v_2_str(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_key_pair> cst_encode_box_autoadd_key_pair(KeyPair raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_key_pair();
    cst_api_fill_to_wire_key_pair(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str>
      cst_encode_box_autoadd_l_btc_swap_script_v_2_str(
          LBtcSwapScriptV2Str raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_l_btc_swap_script_v_2_str();
    cst_api_fill_to_wire_l_btc_swap_script_v_2_str(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>
      cst_encode_box_autoadd_lbtc_ln_v_1_swap(LbtcLnV1Swap raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lbtc_ln_v_1_swap();
    cst_api_fill_to_wire_lbtc_ln_v_1_swap(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>
      cst_encode_box_autoadd_lbtc_ln_v_2_swap(LbtcLnV2Swap raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lbtc_ln_v_2_swap();
    cst_api_fill_to_wire_lbtc_ln_v_2_swap(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_pre_image> cst_encode_box_autoadd_pre_image(
      PreImage raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_pre_image();
    cst_api_fill_to_wire_pre_image(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  int cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  void cst_api_fill_to_wire_all_fees(
      AllFees apiObj, wire_cst_all_fees wireObj) {
    cst_api_fill_to_wire_limits(apiObj.btcLimits, wireObj.btc_limits);
    cst_api_fill_to_wire_limits(apiObj.lbtcLimits, wireObj.lbtc_limits);
    cst_api_fill_to_wire_submarine_swap_fees(
        apiObj.btcSubmarine, wireObj.btc_submarine);
    cst_api_fill_to_wire_reverse_swap_fees(
        apiObj.btcReverse, wireObj.btc_reverse);
    cst_api_fill_to_wire_submarine_swap_fees(
        apiObj.lbtcSubmarine, wireObj.lbtc_submarine);
    cst_api_fill_to_wire_reverse_swap_fees(
        apiObj.lbtcReverse, wireObj.lbtc_reverse);
    wireObj.btc_pair_hash = cst_encode_String(apiObj.btcPairHash);
    wireObj.lbtc_pair_hash = cst_encode_String(apiObj.lbtcPairHash);
  }

  @protected
  void cst_api_fill_to_wire_boltz_error(
      BoltzError apiObj, wire_cst_boltz_error wireObj) {
    wireObj.kind = cst_encode_String(apiObj.kind);
    wireObj.message = cst_encode_String(apiObj.message);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_btc_ln_v_1_swap(
      BtcLnV1Swap apiObj, ffi.Pointer<wire_cst_btc_ln_v_1_swap> wireObj) {
    cst_api_fill_to_wire_btc_ln_v_1_swap(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_btc_ln_v_2_swap(
      BtcLnV2Swap apiObj, ffi.Pointer<wire_cst_btc_ln_v_2_swap> wireObj) {
    cst_api_fill_to_wire_btc_ln_v_2_swap(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_btc_swap_script_v_2_str(
      BtcSwapScriptV2Str apiObj,
      ffi.Pointer<wire_cst_btc_swap_script_v_2_str> wireObj) {
    cst_api_fill_to_wire_btc_swap_script_v_2_str(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_key_pair(
      KeyPair apiObj, ffi.Pointer<wire_cst_key_pair> wireObj) {
    cst_api_fill_to_wire_key_pair(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_l_btc_swap_script_v_2_str(
      LBtcSwapScriptV2Str apiObj,
      ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str> wireObj) {
    cst_api_fill_to_wire_l_btc_swap_script_v_2_str(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lbtc_ln_v_1_swap(
      LbtcLnV1Swap apiObj, ffi.Pointer<wire_cst_lbtc_ln_v_1_swap> wireObj) {
    cst_api_fill_to_wire_lbtc_ln_v_1_swap(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lbtc_ln_v_2_swap(
      LbtcLnV2Swap apiObj, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> wireObj) {
    cst_api_fill_to_wire_lbtc_ln_v_2_swap(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_pre_image(
      PreImage apiObj, ffi.Pointer<wire_cst_pre_image> wireObj) {
    cst_api_fill_to_wire_pre_image(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_btc_ln_v_1_swap(
      BtcLnV1Swap apiObj, wire_cst_btc_ln_v_1_swap wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.kind = cst_encode_swap_type(apiObj.kind);
    wireObj.network = cst_encode_chain(apiObj.network);
    cst_api_fill_to_wire_key_pair(apiObj.keys, wireObj.keys);
    cst_api_fill_to_wire_pre_image(apiObj.preimage, wireObj.preimage);
    wireObj.redeem_script = cst_encode_String(apiObj.redeemScript);
    wireObj.invoice = cst_encode_String(apiObj.invoice);
    wireObj.script_address = cst_encode_String(apiObj.scriptAddress);
    wireObj.out_amount = cst_encode_u_64(apiObj.outAmount);
    wireObj.electrum_url = cst_encode_String(apiObj.electrumUrl);
    wireObj.boltz_url = cst_encode_String(apiObj.boltzUrl);
  }

  @protected
  void cst_api_fill_to_wire_btc_ln_v_2_swap(
      BtcLnV2Swap apiObj, wire_cst_btc_ln_v_2_swap wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.kind = cst_encode_swap_type(apiObj.kind);
    wireObj.network = cst_encode_chain(apiObj.network);
    cst_api_fill_to_wire_key_pair(apiObj.keys, wireObj.keys);
    cst_api_fill_to_wire_pre_image(apiObj.preimage, wireObj.preimage);
    cst_api_fill_to_wire_btc_swap_script_v_2_str(
        apiObj.swapScript, wireObj.swap_script);
    wireObj.invoice = cst_encode_String(apiObj.invoice);
    wireObj.script_address = cst_encode_String(apiObj.scriptAddress);
    wireObj.out_amount = cst_encode_u_64(apiObj.outAmount);
    wireObj.electrum_url = cst_encode_String(apiObj.electrumUrl);
    wireObj.boltz_url = cst_encode_String(apiObj.boltzUrl);
    wireObj.referral_id = cst_encode_opt_String(apiObj.referralId);
  }

  @protected
  void cst_api_fill_to_wire_btc_swap_script_v_2_str(
      BtcSwapScriptV2Str apiObj, wire_cst_btc_swap_script_v_2_str wireObj) {
    wireObj.swap_type = cst_encode_swap_type(apiObj.swapType);
    wireObj.funding_addrs = cst_encode_opt_String(apiObj.fundingAddrs);
    wireObj.hashlock = cst_encode_String(apiObj.hashlock);
    wireObj.receiver_pubkey = cst_encode_String(apiObj.receiverPubkey);
    wireObj.locktime = cst_encode_u_32(apiObj.locktime);
    wireObj.sender_pubkey = cst_encode_String(apiObj.senderPubkey);
  }

  @protected
  void cst_api_fill_to_wire_decoded_invoice(
      DecodedInvoice apiObj, wire_cst_decoded_invoice wireObj) {
    wireObj.msats = cst_encode_u_64(apiObj.msats);
    wireObj.expiry = cst_encode_u_64(apiObj.expiry);
    wireObj.expires_in = cst_encode_u_64(apiObj.expiresIn);
    wireObj.expires_at = cst_encode_u_64(apiObj.expiresAt);
    wireObj.is_expired = cst_encode_bool(apiObj.isExpired);
    wireObj.network = cst_encode_String(apiObj.network);
    wireObj.cltv_exp_delta = cst_encode_u_64(apiObj.cltvExpDelta);
    wireObj.bip21 = cst_encode_opt_String(apiObj.bip21);
    wireObj.preimage_hash = cst_encode_String(apiObj.preimageHash);
  }

  @protected
  void cst_api_fill_to_wire_key_pair(
      KeyPair apiObj, wire_cst_key_pair wireObj) {
    wireObj.secret_key = cst_encode_String(apiObj.secretKey);
    wireObj.public_key = cst_encode_String(apiObj.publicKey);
  }

  @protected
  void cst_api_fill_to_wire_l_btc_swap_script_v_2_str(
      LBtcSwapScriptV2Str apiObj, wire_cst_l_btc_swap_script_v_2_str wireObj) {
    wireObj.swap_type = cst_encode_swap_type(apiObj.swapType);
    wireObj.funding_addrs = cst_encode_opt_String(apiObj.fundingAddrs);
    wireObj.hashlock = cst_encode_String(apiObj.hashlock);
    wireObj.receiver_pubkey = cst_encode_String(apiObj.receiverPubkey);
    wireObj.locktime = cst_encode_u_32(apiObj.locktime);
    wireObj.sender_pubkey = cst_encode_String(apiObj.senderPubkey);
    wireObj.blinding_key = cst_encode_String(apiObj.blindingKey);
  }

  @protected
  void cst_api_fill_to_wire_lbtc_ln_v_1_swap(
      LbtcLnV1Swap apiObj, wire_cst_lbtc_ln_v_1_swap wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.kind = cst_encode_swap_type(apiObj.kind);
    wireObj.network = cst_encode_chain(apiObj.network);
    cst_api_fill_to_wire_key_pair(apiObj.keys, wireObj.keys);
    cst_api_fill_to_wire_pre_image(apiObj.preimage, wireObj.preimage);
    wireObj.redeem_script = cst_encode_String(apiObj.redeemScript);
    wireObj.invoice = cst_encode_String(apiObj.invoice);
    wireObj.out_amount = cst_encode_u_64(apiObj.outAmount);
    wireObj.script_address = cst_encode_String(apiObj.scriptAddress);
    wireObj.blinding_key = cst_encode_String(apiObj.blindingKey);
    wireObj.electrum_url = cst_encode_String(apiObj.electrumUrl);
    wireObj.boltz_url = cst_encode_String(apiObj.boltzUrl);
  }

  @protected
  void cst_api_fill_to_wire_lbtc_ln_v_2_swap(
      LbtcLnV2Swap apiObj, wire_cst_lbtc_ln_v_2_swap wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.kind = cst_encode_swap_type(apiObj.kind);
    wireObj.network = cst_encode_chain(apiObj.network);
    cst_api_fill_to_wire_key_pair(apiObj.keys, wireObj.keys);
    cst_api_fill_to_wire_pre_image(apiObj.preimage, wireObj.preimage);
    cst_api_fill_to_wire_l_btc_swap_script_v_2_str(
        apiObj.swapScript, wireObj.swap_script);
    wireObj.invoice = cst_encode_String(apiObj.invoice);
    wireObj.out_amount = cst_encode_u_64(apiObj.outAmount);
    wireObj.script_address = cst_encode_String(apiObj.scriptAddress);
    wireObj.blinding_key = cst_encode_String(apiObj.blindingKey);
    wireObj.electrum_url = cst_encode_String(apiObj.electrumUrl);
    wireObj.boltz_url = cst_encode_String(apiObj.boltzUrl);
    wireObj.referral_id = cst_encode_opt_String(apiObj.referralId);
  }

  @protected
  void cst_api_fill_to_wire_limits(Limits apiObj, wire_cst_limits wireObj) {
    wireObj.minimal = cst_encode_u_64(apiObj.minimal);
    wireObj.maximal = cst_encode_u_64(apiObj.maximal);
  }

  @protected
  void cst_api_fill_to_wire_pre_image(
      PreImage apiObj, wire_cst_pre_image wireObj) {
    wireObj.value = cst_encode_String(apiObj.value);
    wireObj.sha256 = cst_encode_String(apiObj.sha256);
    wireObj.hash160 = cst_encode_String(apiObj.hash160);
  }

  @protected
  void cst_api_fill_to_wire_reverse_swap_fees(
      ReverseSwapFees apiObj, wire_cst_reverse_swap_fees wireObj) {
    wireObj.boltz_fees_rate = cst_encode_f_64(apiObj.boltzFeesRate);
    wireObj.lockup_fees = cst_encode_u_64(apiObj.lockupFees);
    wireObj.claim_fees_estimate = cst_encode_u_64(apiObj.claimFeesEstimate);
  }

  @protected
  void cst_api_fill_to_wire_submarine_swap_fees(
      SubmarineSwapFees apiObj, wire_cst_submarine_swap_fees wireObj) {
    wireObj.boltz_fees_rate = cst_encode_f_64(apiObj.boltzFeesRate);
    wireObj.claim_fees = cst_encode_u_64(apiObj.claimFees);
    wireObj.lockup_fees_estimate = cst_encode_u_64(apiObj.lockupFeesEstimate);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_chain(Chain raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_swap_type(SwapType raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_all_fees(AllFees self, SseSerializer serializer);

  @protected
  void sse_encode_boltz_error(BoltzError self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_btc_ln_v_1_swap(
      BtcLnV1Swap self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_btc_ln_v_2_swap(
      BtcLnV2Swap self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_btc_swap_script_v_2_str(
      BtcSwapScriptV2Str self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_key_pair(KeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_l_btc_swap_script_v_2_str(
      LBtcSwapScriptV2Str self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lbtc_ln_v_1_swap(
      LbtcLnV1Swap self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lbtc_ln_v_2_swap(
      LbtcLnV2Swap self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_pre_image(
      PreImage self, SseSerializer serializer);

  @protected
  void sse_encode_btc_ln_v_1_swap(BtcLnV1Swap self, SseSerializer serializer);

  @protected
  void sse_encode_btc_ln_v_2_swap(BtcLnV2Swap self, SseSerializer serializer);

  @protected
  void sse_encode_btc_swap_script_v_2_str(
      BtcSwapScriptV2Str self, SseSerializer serializer);

  @protected
  void sse_encode_chain(Chain self, SseSerializer serializer);

  @protected
  void sse_encode_decoded_invoice(
      DecodedInvoice self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_key_pair(KeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_l_btc_swap_script_v_2_str(
      LBtcSwapScriptV2Str self, SseSerializer serializer);

  @protected
  void sse_encode_lbtc_ln_v_1_swap(LbtcLnV1Swap self, SseSerializer serializer);

  @protected
  void sse_encode_lbtc_ln_v_2_swap(LbtcLnV2Swap self, SseSerializer serializer);

  @protected
  void sse_encode_limits(Limits self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_pre_image(PreImage self, SseSerializer serializer);

  @protected
  void sse_encode_reverse_swap_fees(
      ReverseSwapFees self, SseSerializer serializer);

  @protected
  void sse_encode_submarine_swap_fees(
      SubmarineSwapFees self, SseSerializer serializer);

  @protected
  void sse_encode_swap_type(SwapType self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BoltzCoreWire implements BaseWire {
  factory BoltzCoreWire.fromExternalLibrary(ExternalLibrary lib) =>
      BoltzCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BoltzCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BoltzCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_btc_ln_v_1_swap_claim(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_1_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
  ) {
    return _wire_btc_ln_v_1_swap_claim(
      port_,
      that,
      out_address,
      abs_fee,
    );
  }

  late final _wire_btc_ln_v_1_swap_claimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_btc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64)>>('frbgen_boltz_dart_wire_btc_ln_v_1_swap_claim');
  late final _wire_btc_ln_v_1_swap_claim =
      _wire_btc_ln_v_1_swap_claimPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_btc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_btc_ln_v_1_swap_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> id,
    int kind,
    int network,
    ffi.Pointer<wire_cst_key_pair> keys,
    ffi.Pointer<wire_cst_pre_image> preimage,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> redeem_script,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> script_address,
    int out_amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
  ) {
    return _wire_btc_ln_v_1_swap_new(
      port_,
      id,
      kind,
      network,
      keys,
      preimage,
      redeem_script,
      invoice,
      script_address,
      out_amount,
      electrum_url,
      boltz_url,
    );
  }

  late final _wire_btc_ln_v_1_swap_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_key_pair>,
                  ffi.Pointer<wire_cst_pre_image>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_1_swap_new');
  late final _wire_btc_ln_v_1_swap_new =
      _wire_btc_ln_v_1_swap_newPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              ffi.Pointer<wire_cst_key_pair>,
              ffi.Pointer<wire_cst_pre_image>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_btc_ln_v_1_swap_new_reverse(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    int out_amount,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pair_hash,
  ) {
    return _wire_btc_ln_v_1_swap_new_reverse(
      port_,
      mnemonic,
      index,
      out_amount,
      network,
      electrum_url,
      boltz_url,
      pair_hash,
    );
  }

  late final _wire_btc_ln_v_1_swap_new_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Uint64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_1_swap_new_reverse');
  late final _wire_btc_ln_v_1_swap_new_reverse =
      _wire_btc_ln_v_1_swap_new_reversePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_btc_ln_v_1_swap_new_submarine(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pair_hash,
  ) {
    return _wire_btc_ln_v_1_swap_new_submarine(
      port_,
      mnemonic,
      index,
      invoice,
      network,
      electrum_url,
      boltz_url,
      pair_hash,
    );
  }

  late final _wire_btc_ln_v_1_swap_new_submarinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_1_swap_new_submarine');
  late final _wire_btc_ln_v_1_swap_new_submarine =
      _wire_btc_ln_v_1_swap_new_submarinePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_btc_ln_v_1_swap_refund(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_1_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
  ) {
    return _wire_btc_ln_v_1_swap_refund(
      port_,
      that,
      out_address,
      abs_fee,
    );
  }

  late final _wire_btc_ln_v_1_swap_refundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_btc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64)>>('frbgen_boltz_dart_wire_btc_ln_v_1_swap_refund');
  late final _wire_btc_ln_v_1_swap_refund =
      _wire_btc_ln_v_1_swap_refundPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_btc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_btc_ln_v_1_swap_tx_size(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_1_swap> that,
  ) {
    return _wire_btc_ln_v_1_swap_tx_size(
      port_,
      that,
    );
  }

  late final _wire_btc_ln_v_1_swap_tx_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_btc_ln_v_1_swap>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_1_swap_tx_size');
  late final _wire_btc_ln_v_1_swap_tx_size = _wire_btc_ln_v_1_swap_tx_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_btc_ln_v_1_swap>)>();

  void wire_btc_ln_v_2_swap_claim(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
    bool try_cooperate,
  ) {
    return _wire_btc_ln_v_2_swap_claim(
      port_,
      that,
      out_address,
      abs_fee,
      try_cooperate,
    );
  }

  late final _wire_btc_ln_v_2_swap_claimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_btc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64,
              ffi.Bool)>>('frbgen_boltz_dart_wire_btc_ln_v_2_swap_claim');
  late final _wire_btc_ln_v_2_swap_claim =
      _wire_btc_ln_v_2_swap_claimPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_btc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, bool)>();

  void wire_btc_ln_v_2_swap_coop_close_submarine(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_2_swap> that,
  ) {
    return _wire_btc_ln_v_2_swap_coop_close_submarine(
      port_,
      that,
    );
  }

  late final _wire_btc_ln_v_2_swap_coop_close_submarinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_btc_ln_v_2_swap>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_2_swap_coop_close_submarine');
  late final _wire_btc_ln_v_2_swap_coop_close_submarine =
      _wire_btc_ln_v_2_swap_coop_close_submarinePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_btc_ln_v_2_swap>)>();

  void wire_btc_ln_v_2_swap_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> id,
    int kind,
    int network,
    ffi.Pointer<wire_cst_key_pair> keys,
    ffi.Pointer<wire_cst_pre_image> preimage,
    ffi.Pointer<wire_cst_btc_swap_script_v_2_str> swap_script,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> script_address,
    int out_amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id,
  ) {
    return _wire_btc_ln_v_2_swap_new(
      port_,
      id,
      kind,
      network,
      keys,
      preimage,
      swap_script,
      invoice,
      script_address,
      out_amount,
      electrum_url,
      boltz_url,
      referral_id,
    );
  }

  late final _wire_btc_ln_v_2_swap_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_key_pair>,
                  ffi.Pointer<wire_cst_pre_image>,
                  ffi.Pointer<wire_cst_btc_swap_script_v_2_str>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_2_swap_new');
  late final _wire_btc_ln_v_2_swap_new =
      _wire_btc_ln_v_2_swap_newPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              ffi.Pointer<wire_cst_key_pair>,
              ffi.Pointer<wire_cst_pre_image>,
              ffi.Pointer<wire_cst_btc_swap_script_v_2_str>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_btc_ln_v_2_swap_new_reverse(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    int out_amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id,
  ) {
    return _wire_btc_ln_v_2_swap_new_reverse(
      port_,
      mnemonic,
      index,
      out_amount,
      out_address,
      network,
      electrum_url,
      boltz_url,
      referral_id,
    );
  }

  late final _wire_btc_ln_v_2_swap_new_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_2_swap_new_reverse');
  late final _wire_btc_ln_v_2_swap_new_reverse =
      _wire_btc_ln_v_2_swap_new_reversePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_btc_ln_v_2_swap_new_submarine(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id,
  ) {
    return _wire_btc_ln_v_2_swap_new_submarine(
      port_,
      mnemonic,
      index,
      invoice,
      network,
      electrum_url,
      boltz_url,
      referral_id,
    );
  }

  late final _wire_btc_ln_v_2_swap_new_submarinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_2_swap_new_submarine');
  late final _wire_btc_ln_v_2_swap_new_submarine =
      _wire_btc_ln_v_2_swap_new_submarinePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_btc_ln_v_2_swap_refund(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
    bool try_cooperate,
  ) {
    return _wire_btc_ln_v_2_swap_refund(
      port_,
      that,
      out_address,
      abs_fee,
      try_cooperate,
    );
  }

  late final _wire_btc_ln_v_2_swap_refundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_btc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64,
              ffi.Bool)>>('frbgen_boltz_dart_wire_btc_ln_v_2_swap_refund');
  late final _wire_btc_ln_v_2_swap_refund =
      _wire_btc_ln_v_2_swap_refundPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_btc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, bool)>();

  void wire_btc_ln_v_2_swap_tx_size(
    int port_,
    ffi.Pointer<wire_cst_btc_ln_v_2_swap> that,
  ) {
    return _wire_btc_ln_v_2_swap_tx_size(
      port_,
      that,
    );
  }

  late final _wire_btc_ln_v_2_swap_tx_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_btc_ln_v_2_swap>)>>(
      'frbgen_boltz_dart_wire_btc_ln_v_2_swap_tx_size');
  late final _wire_btc_ln_v_2_swap_tx_size = _wire_btc_ln_v_2_swap_tx_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_btc_ln_v_2_swap>)>();

  void wire_boltz_error_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> kind,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> message,
  ) {
    return _wire_boltz_error_new(
      port_,
      kind,
      message,
    );
  }

  late final _wire_boltz_error_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_boltz_error_new');
  late final _wire_boltz_error_new = _wire_boltz_error_newPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_1_swap_claim(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_1_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
  ) {
    return _wire_lbtc_ln_v_1_swap_claim(
      port_,
      that,
      out_address,
      abs_fee,
    );
  }

  late final _wire_lbtc_ln_v_1_swap_claimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64)>>('frbgen_boltz_dart_wire_lbtc_ln_v_1_swap_claim');
  late final _wire_lbtc_ln_v_1_swap_claim =
      _wire_lbtc_ln_v_1_swap_claimPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_lbtc_ln_v_1_swap_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> id,
    int kind,
    int network,
    ffi.Pointer<wire_cst_key_pair> keys,
    ffi.Pointer<wire_cst_pre_image> preimage,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> redeem_script,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    int out_amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> blinding_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
  ) {
    return _wire_lbtc_ln_v_1_swap_new(
      port_,
      id,
      kind,
      network,
      keys,
      preimage,
      redeem_script,
      invoice,
      out_amount,
      out_address,
      blinding_key,
      electrum_url,
      boltz_url,
    );
  }

  late final _wire_lbtc_ln_v_1_swap_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_key_pair>,
                  ffi.Pointer<wire_cst_pre_image>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_1_swap_new');
  late final _wire_lbtc_ln_v_1_swap_new =
      _wire_lbtc_ln_v_1_swap_newPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              ffi.Pointer<wire_cst_key_pair>,
              ffi.Pointer<wire_cst_pre_image>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_1_swap_new_reverse(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    int out_amount,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pair_hash,
  ) {
    return _wire_lbtc_ln_v_1_swap_new_reverse(
      port_,
      mnemonic,
      index,
      out_amount,
      network,
      electrum_url,
      boltz_url,
      pair_hash,
    );
  }

  late final _wire_lbtc_ln_v_1_swap_new_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Uint64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_1_swap_new_reverse');
  late final _wire_lbtc_ln_v_1_swap_new_reverse =
      _wire_lbtc_ln_v_1_swap_new_reversePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_1_swap_new_submarine(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> pair_hash,
  ) {
    return _wire_lbtc_ln_v_1_swap_new_submarine(
      port_,
      mnemonic,
      index,
      invoice,
      network,
      electrum_url,
      boltz_url,
      pair_hash,
    );
  }

  late final _wire_lbtc_ln_v_1_swap_new_submarinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_1_swap_new_submarine');
  late final _wire_lbtc_ln_v_1_swap_new_submarine =
      _wire_lbtc_ln_v_1_swap_new_submarinePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_1_swap_refund(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_1_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
  ) {
    return _wire_lbtc_ln_v_1_swap_refund(
      port_,
      that,
      out_address,
      abs_fee,
    );
  }

  late final _wire_lbtc_ln_v_1_swap_refundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64)>>('frbgen_boltz_dart_wire_lbtc_ln_v_1_swap_refund');
  late final _wire_lbtc_ln_v_1_swap_refund =
      _wire_lbtc_ln_v_1_swap_refundPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_lbtc_ln_v_1_swap_tx_size(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_1_swap> swap,
  ) {
    return _wire_lbtc_ln_v_1_swap_tx_size(
      port_,
      swap,
    );
  }

  late final _wire_lbtc_ln_v_1_swap_tx_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_1_swap_tx_size');
  late final _wire_lbtc_ln_v_1_swap_tx_size = _wire_lbtc_ln_v_1_swap_tx_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>)>();

  void wire_lbtc_ln_v_2_swap_broadcast_tx(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> signed_bytes,
  ) {
    return _wire_lbtc_ln_v_2_swap_broadcast_tx(
      port_,
      that,
      signed_bytes,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_broadcast_txPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_broadcast_tx');
  late final _wire_lbtc_ln_v_2_swap_broadcast_tx =
      _wire_lbtc_ln_v_2_swap_broadcast_txPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire_lbtc_ln_v_2_swap_claim(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
    bool try_cooperate,
  ) {
    return _wire_lbtc_ln_v_2_swap_claim(
      port_,
      that,
      out_address,
      abs_fee,
      try_cooperate,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_claimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64,
              ffi.Bool)>>('frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_claim');
  late final _wire_lbtc_ln_v_2_swap_claim =
      _wire_lbtc_ln_v_2_swap_claimPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, bool)>();

  void wire_lbtc_ln_v_2_swap_claim_bytes(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
    bool try_cooperate,
  ) {
    return _wire_lbtc_ln_v_2_swap_claim_bytes(
      port_,
      that,
      out_address,
      abs_fee,
      try_cooperate,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_claim_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Bool)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_claim_bytes');
  late final _wire_lbtc_ln_v_2_swap_claim_bytes =
      _wire_lbtc_ln_v_2_swap_claim_bytesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, bool)>();

  void wire_lbtc_ln_v_2_swap_coop_close_submarine(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
  ) {
    return _wire_lbtc_ln_v_2_swap_coop_close_submarine(
      port_,
      that,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_coop_close_submarinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_coop_close_submarine');
  late final _wire_lbtc_ln_v_2_swap_coop_close_submarine =
      _wire_lbtc_ln_v_2_swap_coop_close_submarinePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>)>();

  void wire_lbtc_ln_v_2_swap_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> id,
    int kind,
    int network,
    ffi.Pointer<wire_cst_key_pair> keys,
    ffi.Pointer<wire_cst_pre_image> preimage,
    ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str> swap_script,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    int out_amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> blinding_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id,
  ) {
    return _wire_lbtc_ln_v_2_swap_new(
      port_,
      id,
      kind,
      network,
      keys,
      preimage,
      swap_script,
      invoice,
      out_amount,
      out_address,
      blinding_key,
      electrum_url,
      boltz_url,
      referral_id,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_key_pair>,
                  ffi.Pointer<wire_cst_pre_image>,
                  ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_new');
  late final _wire_lbtc_ln_v_2_swap_new =
      _wire_lbtc_ln_v_2_swap_newPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              ffi.Pointer<wire_cst_key_pair>,
              ffi.Pointer<wire_cst_pre_image>,
              ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_2_swap_new_reverse(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    int out_amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id,
  ) {
    return _wire_lbtc_ln_v_2_swap_new_reverse(
      port_,
      mnemonic,
      index,
      out_amount,
      out_address,
      network,
      electrum_url,
      boltz_url,
      referral_id,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_new_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_new_reverse');
  late final _wire_lbtc_ln_v_2_swap_new_reverse =
      _wire_lbtc_ln_v_2_swap_new_reversePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_2_swap_new_submarine(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int index,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
    int network,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id,
  ) {
    return _wire_lbtc_ln_v_2_swap_new_submarine(
      port_,
      mnemonic,
      index,
      invoice,
      network,
      electrum_url,
      boltz_url,
      referral_id,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_new_submarinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_new_submarine');
  late final _wire_lbtc_ln_v_2_swap_new_submarine =
      _wire_lbtc_ln_v_2_swap_new_submarinePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_lbtc_ln_v_2_swap_refund(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
    bool try_cooperate,
  ) {
    return _wire_lbtc_ln_v_2_swap_refund(
      port_,
      that,
      out_address,
      abs_fee,
      try_cooperate,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_refundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Uint64,
              ffi.Bool)>>('frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_refund');
  late final _wire_lbtc_ln_v_2_swap_refund =
      _wire_lbtc_ln_v_2_swap_refundPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, bool)>();

  void wire_lbtc_ln_v_2_swap_refund_bytes(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> out_address,
    int abs_fee,
    bool try_cooperate,
  ) {
    return _wire_lbtc_ln_v_2_swap_refund_bytes(
      port_,
      that,
      out_address,
      abs_fee,
      try_cooperate,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_refund_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Bool)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_refund_bytes');
  late final _wire_lbtc_ln_v_2_swap_refund_bytes =
      _wire_lbtc_ln_v_2_swap_refund_bytesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, bool)>();

  void wire_lbtc_ln_v_2_swap_tx_size(
    int port_,
    ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> that,
  ) {
    return _wire_lbtc_ln_v_2_swap_tx_size(
      port_,
      that,
    );
  }

  late final _wire_lbtc_ln_v_2_swap_tx_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>)>>(
      'frbgen_boltz_dart_wire_lbtc_ln_v_2_swap_tx_size');
  late final _wire_lbtc_ln_v_2_swap_tx_size = _wire_lbtc_ln_v_2_swap_tx_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>)>();

  void wire_all_fees_fetch(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
  ) {
    return _wire_all_fees_fetch(
      port_,
      boltz_url,
    );
  }

  late final _wire_all_fees_fetchPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_all_fees_fetch');
  late final _wire_all_fees_fetch = _wire_all_fees_fetchPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire_btc_swap_script_v_2_str_new(
    int swap_type,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> funding_addrs,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> hashlock,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> receiver_pubkey,
    int locktime,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sender_pubkey,
  ) {
    return _wire_btc_swap_script_v_2_str_new(
      swap_type,
      funding_addrs,
      hashlock,
      receiver_pubkey,
      locktime,
      sender_pubkey,
    );
  }

  late final _wire_btc_swap_script_v_2_str_newPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_btc_swap_script_v_2_str_new');
  late final _wire_btc_swap_script_v_2_str_new =
      _wire_btc_swap_script_v_2_str_newPtr.asFunction<
          WireSyncRust2DartDco Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_decoded_invoice_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> s,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url,
  ) {
    return _wire_decoded_invoice_from_string(
      port_,
      s,
      boltz_url,
    );
  }

  late final _wire_decoded_invoice_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_decoded_invoice_from_string');
  late final _wire_decoded_invoice_from_string =
      _wire_decoded_invoice_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_key_pair_generate(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
    int network,
    int index,
    int swap_type,
  ) {
    return _wire_key_pair_generate(
      port_,
      mnemonic,
      network,
      index,
      swap_type,
    );
  }

  late final _wire_key_pair_generatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Int32,
              ffi.Uint64,
              ffi.Int32)>>('frbgen_boltz_dart_wire_key_pair_generate');
  late final _wire_key_pair_generate = _wire_key_pair_generatePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, int, int)>();

  WireSyncRust2DartDco wire_key_pair_new(
    ffi.Pointer<wire_cst_list_prim_u_8_strict> secret_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> public_key,
  ) {
    return _wire_key_pair_new(
      secret_key,
      public_key,
    );
  }

  late final _wire_key_pair_newPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_key_pair_new');
  late final _wire_key_pair_new = _wire_key_pair_newPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire_l_btc_swap_script_v_2_str_new(
    int swap_type,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> funding_addrs,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> hashlock,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> receiver_pubkey,
    int locktime,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sender_pubkey,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> blinding_key,
  ) {
    return _wire_l_btc_swap_script_v_2_str_new(
      swap_type,
      funding_addrs,
      hashlock,
      receiver_pubkey,
      locktime,
      sender_pubkey,
      blinding_key,
    );
  }

  late final _wire_l_btc_swap_script_v_2_str_newPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Int32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint32,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_l_btc_swap_script_v_2_str_new');
  late final _wire_l_btc_swap_script_v_2_str_new =
      _wire_l_btc_swap_script_v_2_str_newPtr.asFunction<
          WireSyncRust2DartDco Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_pre_image_generate(
    int port_,
  ) {
    return _wire_pre_image_generate(
      port_,
    );
  }

  late final _wire_pre_image_generatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_boltz_dart_wire_pre_image_generate');
  late final _wire_pre_image_generate =
      _wire_pre_image_generatePtr.asFunction<void Function(int)>();

  WireSyncRust2DartDco wire_pre_image_new(
    ffi.Pointer<wire_cst_list_prim_u_8_strict> value,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> sha256,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> hash160,
  ) {
    return _wire_pre_image_new(
      value,
      sha256,
      hash160,
    );
  }

  late final _wire_pre_image_newPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_boltz_dart_wire_pre_image_new');
  late final _wire_pre_image_new = _wire_pre_image_newPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  ffi.Pointer<wire_cst_btc_ln_v_1_swap> cst_new_box_autoadd_btc_ln_v_1_swap() {
    return _cst_new_box_autoadd_btc_ln_v_1_swap();
  }

  late final _cst_new_box_autoadd_btc_ln_v_1_swapPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_btc_ln_v_1_swap> Function()>>(
      'frbgen_boltz_dart_cst_new_box_autoadd_btc_ln_v_1_swap');
  late final _cst_new_box_autoadd_btc_ln_v_1_swap =
      _cst_new_box_autoadd_btc_ln_v_1_swapPtr
          .asFunction<ffi.Pointer<wire_cst_btc_ln_v_1_swap> Function()>();

  ffi.Pointer<wire_cst_btc_ln_v_2_swap> cst_new_box_autoadd_btc_ln_v_2_swap() {
    return _cst_new_box_autoadd_btc_ln_v_2_swap();
  }

  late final _cst_new_box_autoadd_btc_ln_v_2_swapPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_btc_ln_v_2_swap> Function()>>(
      'frbgen_boltz_dart_cst_new_box_autoadd_btc_ln_v_2_swap');
  late final _cst_new_box_autoadd_btc_ln_v_2_swap =
      _cst_new_box_autoadd_btc_ln_v_2_swapPtr
          .asFunction<ffi.Pointer<wire_cst_btc_ln_v_2_swap> Function()>();

  ffi.Pointer<wire_cst_btc_swap_script_v_2_str>
      cst_new_box_autoadd_btc_swap_script_v_2_str() {
    return _cst_new_box_autoadd_btc_swap_script_v_2_str();
  }

  late final _cst_new_box_autoadd_btc_swap_script_v_2_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_btc_swap_script_v_2_str> Function()>>(
      'frbgen_boltz_dart_cst_new_box_autoadd_btc_swap_script_v_2_str');
  late final _cst_new_box_autoadd_btc_swap_script_v_2_str =
      _cst_new_box_autoadd_btc_swap_script_v_2_strPtr.asFunction<
          ffi.Pointer<wire_cst_btc_swap_script_v_2_str> Function()>();

  ffi.Pointer<wire_cst_key_pair> cst_new_box_autoadd_key_pair() {
    return _cst_new_box_autoadd_key_pair();
  }

  late final _cst_new_box_autoadd_key_pairPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_key_pair> Function()>>(
          'frbgen_boltz_dart_cst_new_box_autoadd_key_pair');
  late final _cst_new_box_autoadd_key_pair = _cst_new_box_autoadd_key_pairPtr
      .asFunction<ffi.Pointer<wire_cst_key_pair> Function()>();

  ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str>
      cst_new_box_autoadd_l_btc_swap_script_v_2_str() {
    return _cst_new_box_autoadd_l_btc_swap_script_v_2_str();
  }

  late final _cst_new_box_autoadd_l_btc_swap_script_v_2_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str> Function()>>(
      'frbgen_boltz_dart_cst_new_box_autoadd_l_btc_swap_script_v_2_str');
  late final _cst_new_box_autoadd_l_btc_swap_script_v_2_str =
      _cst_new_box_autoadd_l_btc_swap_script_v_2_strPtr.asFunction<
          ffi.Pointer<wire_cst_l_btc_swap_script_v_2_str> Function()>();

  ffi.Pointer<wire_cst_lbtc_ln_v_1_swap>
      cst_new_box_autoadd_lbtc_ln_v_1_swap() {
    return _cst_new_box_autoadd_lbtc_ln_v_1_swap();
  }

  late final _cst_new_box_autoadd_lbtc_ln_v_1_swapPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_lbtc_ln_v_1_swap> Function()>>(
      'frbgen_boltz_dart_cst_new_box_autoadd_lbtc_ln_v_1_swap');
  late final _cst_new_box_autoadd_lbtc_ln_v_1_swap =
      _cst_new_box_autoadd_lbtc_ln_v_1_swapPtr
          .asFunction<ffi.Pointer<wire_cst_lbtc_ln_v_1_swap> Function()>();

  ffi.Pointer<wire_cst_lbtc_ln_v_2_swap>
      cst_new_box_autoadd_lbtc_ln_v_2_swap() {
    return _cst_new_box_autoadd_lbtc_ln_v_2_swap();
  }

  late final _cst_new_box_autoadd_lbtc_ln_v_2_swapPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> Function()>>(
      'frbgen_boltz_dart_cst_new_box_autoadd_lbtc_ln_v_2_swap');
  late final _cst_new_box_autoadd_lbtc_ln_v_2_swap =
      _cst_new_box_autoadd_lbtc_ln_v_2_swapPtr
          .asFunction<ffi.Pointer<wire_cst_lbtc_ln_v_2_swap> Function()>();

  ffi.Pointer<wire_cst_pre_image> cst_new_box_autoadd_pre_image() {
    return _cst_new_box_autoadd_pre_image();
  }

  late final _cst_new_box_autoadd_pre_imagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_pre_image> Function()>>(
          'frbgen_boltz_dart_cst_new_box_autoadd_pre_image');
  late final _cst_new_box_autoadd_pre_image = _cst_new_box_autoadd_pre_imagePtr
      .asFunction<ffi.Pointer<wire_cst_pre_image> Function()>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_boltz_dart_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_boltz_dart_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_key_pair extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> secret_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> public_key;
}

final class wire_cst_pre_image extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> sha256;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hash160;
}

final class wire_cst_btc_ln_v_1_swap extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int network;

  external wire_cst_key_pair keys;

  external wire_cst_pre_image preimage;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> redeem_script;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_address;

  @ffi.Uint64()
  external int out_amount;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url;
}

final class wire_cst_btc_swap_script_v_2_str extends ffi.Struct {
  @ffi.Int32()
  external int swap_type;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> funding_addrs;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hashlock;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> receiver_pubkey;

  @ffi.Uint32()
  external int locktime;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> sender_pubkey;
}

final class wire_cst_btc_ln_v_2_swap extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int network;

  external wire_cst_key_pair keys;

  external wire_cst_pre_image preimage;

  external wire_cst_btc_swap_script_v_2_str swap_script;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_address;

  @ffi.Uint64()
  external int out_amount;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id;
}

final class wire_cst_lbtc_ln_v_1_swap extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int network;

  external wire_cst_key_pair keys;

  external wire_cst_pre_image preimage;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> redeem_script;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice;

  @ffi.Uint64()
  external int out_amount;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_address;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> blinding_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url;
}

final class wire_cst_l_btc_swap_script_v_2_str extends ffi.Struct {
  @ffi.Int32()
  external int swap_type;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> funding_addrs;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hashlock;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> receiver_pubkey;

  @ffi.Uint32()
  external int locktime;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> sender_pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> blinding_key;
}

final class wire_cst_lbtc_ln_v_2_swap extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  @ffi.Int32()
  external int kind;

  @ffi.Int32()
  external int network;

  external wire_cst_key_pair keys;

  external wire_cst_pre_image preimage;

  external wire_cst_l_btc_swap_script_v_2_str swap_script;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice;

  @ffi.Uint64()
  external int out_amount;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_address;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> blinding_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> electrum_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> boltz_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> referral_id;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_limits extends ffi.Struct {
  @ffi.Uint64()
  external int minimal;

  @ffi.Uint64()
  external int maximal;
}

final class wire_cst_submarine_swap_fees extends ffi.Struct {
  @ffi.Double()
  external double boltz_fees_rate;

  @ffi.Uint64()
  external int claim_fees;

  @ffi.Uint64()
  external int lockup_fees_estimate;
}

final class wire_cst_reverse_swap_fees extends ffi.Struct {
  @ffi.Double()
  external double boltz_fees_rate;

  @ffi.Uint64()
  external int lockup_fees;

  @ffi.Uint64()
  external int claim_fees_estimate;
}

final class wire_cst_all_fees extends ffi.Struct {
  external wire_cst_limits btc_limits;

  external wire_cst_limits lbtc_limits;

  external wire_cst_submarine_swap_fees btc_submarine;

  external wire_cst_reverse_swap_fees btc_reverse;

  external wire_cst_submarine_swap_fees lbtc_submarine;

  external wire_cst_reverse_swap_fees lbtc_reverse;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> btc_pair_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lbtc_pair_hash;
}

final class wire_cst_boltz_error extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> kind;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> message;
}

final class wire_cst_decoded_invoice extends ffi.Struct {
  @ffi.Uint64()
  external int msats;

  @ffi.Uint64()
  external int expiry;

  @ffi.Uint64()
  external int expires_in;

  @ffi.Uint64()
  external int expires_at;

  @ffi.Bool()
  external bool is_expired;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> network;

  @ffi.Uint64()
  external int cltv_exp_delta;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bip21;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> preimage_hash;
}
