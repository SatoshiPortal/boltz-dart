// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::error::BoltzError> for wire_cst_boltz_error {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::error::BoltzError {
        crate::api::error::BoltzError {
            kind: self.kind.cst_decode(),
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::btc_ln::BtcLnSwap> for *mut wire_cst_btc_ln_swap {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::btc_ln::BtcLnSwap {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::btc_ln::BtcLnSwap>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::BtcSwapScriptStr> for *mut wire_cst_btc_swap_script_str {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::BtcSwapScriptStr {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::BtcSwapScriptStr>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::chain_swap::ChainSwap> for *mut wire_cst_chain_swap {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::chain_swap::ChainSwap {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::chain_swap::ChainSwap>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::fees::Fees> for *mut wire_cst_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::Fees {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::fees::Fees>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::KeyPair> for *mut wire_cst_key_pair {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::KeyPair {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::KeyPair>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::LBtcSwapScriptStr> for *mut wire_cst_l_btc_swap_script_str {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::LBtcSwapScriptStr {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::LBtcSwapScriptStr>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::lbtc_ln::LbtcLnSwap> for *mut wire_cst_lbtc_ln_swap {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::lbtc_ln::LbtcLnSwap {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::lbtc_ln::LbtcLnSwap>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::PreImage> for *mut wire_cst_pre_image {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PreImage {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::PreImage>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::types::Side> for *mut i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::Side {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::types::Side>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::btc_ln::BtcLnSwap> for wire_cst_btc_ln_swap {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::btc_ln::BtcLnSwap {
        crate::api::btc_ln::BtcLnSwap {
            id: self.id.cst_decode(),
            kind: self.kind.cst_decode(),
            network: self.network.cst_decode(),
            keys: self.keys.cst_decode(),
            key_index: self.key_index.cst_decode(),
            preimage: self.preimage.cst_decode(),
            swap_script: self.swap_script.cst_decode(),
            invoice: self.invoice.cst_decode(),
            script_address: self.script_address.cst_decode(),
            out_amount: self.out_amount.cst_decode(),
            electrum_url: self.electrum_url.cst_decode(),
            boltz_url: self.boltz_url.cst_decode(),
            referral_id: self.referral_id.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::BtcSwapScriptStr> for wire_cst_btc_swap_script_str {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::BtcSwapScriptStr {
        crate::api::types::BtcSwapScriptStr {
            swap_type: self.swap_type.cst_decode(),
            funding_addrs: self.funding_addrs.cst_decode(),
            hashlock: self.hashlock.cst_decode(),
            receiver_pubkey: self.receiver_pubkey.cst_decode(),
            locktime: self.locktime.cst_decode(),
            sender_pubkey: self.sender_pubkey.cst_decode(),
            side: self.side.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::ChainFeesAndLimits> for wire_cst_chain_fees_and_limits {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::ChainFeesAndLimits {
        crate::api::fees::ChainFeesAndLimits {
            btc_limits: self.btc_limits.cst_decode(),
            lbtc_limits: self.lbtc_limits.cst_decode(),
            btc_fees: self.btc_fees.cst_decode(),
            lbtc_fees: self.lbtc_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::chain_swap::ChainSwap> for wire_cst_chain_swap {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::chain_swap::ChainSwap {
        crate::api::chain_swap::ChainSwap {
            id: self.id.cst_decode(),
            is_testnet: self.is_testnet.cst_decode(),
            direction: self.direction.cst_decode(),
            refund_keys: self.refund_keys.cst_decode(),
            refund_index: self.refund_index.cst_decode(),
            claim_keys: self.claim_keys.cst_decode(),
            claim_index: self.claim_index.cst_decode(),
            preimage: self.preimage.cst_decode(),
            btc_script_str: self.btc_script_str.cst_decode(),
            lbtc_script_str: self.lbtc_script_str.cst_decode(),
            script_address: self.script_address.cst_decode(),
            out_amount: self.out_amount.cst_decode(),
            btc_electrum_url: self.btc_electrum_url.cst_decode(),
            lbtc_electrum_url: self.lbtc_electrum_url.cst_decode(),
            boltz_url: self.boltz_url.cst_decode(),
            referral_id: self.referral_id.cst_decode(),
            blinding_key: self.blinding_key.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::ChainSwapFees> for wire_cst_chain_swap_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::ChainSwapFees {
        crate::api::fees::ChainSwapFees {
            percentage: self.percentage.cst_decode(),
            user_lockup: self.user_lockup.cst_decode(),
            user_claim: self.user_claim.cst_decode(),
            server: self.server.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::DecodedInvoice> for wire_cst_decoded_invoice {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::DecodedInvoice {
        crate::api::types::DecodedInvoice {
            msats: self.msats.cst_decode(),
            expiry: self.expiry.cst_decode(),
            expires_in: self.expires_in.cst_decode(),
            expires_at: self.expires_at.cst_decode(),
            is_expired: self.is_expired.cst_decode(),
            network: self.network.cst_decode(),
            cltv_exp_delta: self.cltv_exp_delta.cst_decode(),
            bip21: self.bip21.cst_decode(),
            preimage_hash: self.preimage_hash.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::Fees> for wire_cst_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::Fees {
        crate::api::fees::Fees {
            boltz_url: self.boltz_url.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::KeyPair> for wire_cst_key_pair {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::KeyPair {
        crate::api::types::KeyPair {
            secret_key: self.secret_key.cst_decode(),
            public_key: self.public_key.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::LBtcSwapScriptStr> for wire_cst_l_btc_swap_script_str {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::LBtcSwapScriptStr {
        crate::api::types::LBtcSwapScriptStr {
            swap_type: self.swap_type.cst_decode(),
            funding_addrs: self.funding_addrs.cst_decode(),
            hashlock: self.hashlock.cst_decode(),
            receiver_pubkey: self.receiver_pubkey.cst_decode(),
            locktime: self.locktime.cst_decode(),
            sender_pubkey: self.sender_pubkey.cst_decode(),
            blinding_key: self.blinding_key.cst_decode(),
            side: self.side.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::lbtc_ln::LbtcLnSwap> for wire_cst_lbtc_ln_swap {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::lbtc_ln::LbtcLnSwap {
        crate::api::lbtc_ln::LbtcLnSwap {
            id: self.id.cst_decode(),
            kind: self.kind.cst_decode(),
            network: self.network.cst_decode(),
            keys: self.keys.cst_decode(),
            key_index: self.key_index.cst_decode(),
            preimage: self.preimage.cst_decode(),
            swap_script: self.swap_script.cst_decode(),
            invoice: self.invoice.cst_decode(),
            out_amount: self.out_amount.cst_decode(),
            script_address: self.script_address.cst_decode(),
            blinding_key: self.blinding_key.cst_decode(),
            electrum_url: self.electrum_url.cst_decode(),
            boltz_url: self.boltz_url.cst_decode(),
            referral_id: self.referral_id.cst_decode(),
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<crate::api::fees::MinerFees> for wire_cst_miner_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::MinerFees {
        crate::api::fees::MinerFees {
            lockup: self.lockup.cst_decode(),
            claim: self.claim.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::types::PreImage> for wire_cst_pre_image {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::types::PreImage {
        crate::api::types::PreImage {
            value: self.value.cst_decode(),
            sha256: self.sha256.cst_decode(),
            hash160: self.hash160.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::RevSwapFees> for wire_cst_rev_swap_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::RevSwapFees {
        crate::api::fees::RevSwapFees {
            percentage: self.percentage.cst_decode(),
            miner_fees: self.miner_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::ReverseFeesAndLimits> for wire_cst_reverse_fees_and_limits {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::ReverseFeesAndLimits {
        crate::api::fees::ReverseFeesAndLimits {
            btc_limits: self.btc_limits.cst_decode(),
            lbtc_limits: self.lbtc_limits.cst_decode(),
            btc_fees: self.btc_fees.cst_decode(),
            lbtc_fees: self.lbtc_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::SubSwapFees> for wire_cst_sub_swap_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::SubSwapFees {
        crate::api::fees::SubSwapFees {
            percentage: self.percentage.cst_decode(),
            miner_fees: self.miner_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::SubmarineFeesAndLimits> for wire_cst_submarine_fees_and_limits {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::SubmarineFeesAndLimits {
        crate::api::fees::SubmarineFeesAndLimits {
            btc_limits: self.btc_limits.cst_decode(),
            lbtc_limits: self.lbtc_limits.cst_decode(),
            btc_fees: self.btc_fees.cst_decode(),
            lbtc_fees: self.lbtc_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::fees::SwapLimits> for wire_cst_swap_limits {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::fees::SwapLimits {
        crate::api::fees::SwapLimits {
            minimal: self.minimal.cst_decode(),
            maximal: self.maximal.cst_decode(),
        }
    }
}
impl NewWithNullPtr for wire_cst_boltz_error {
    fn new_with_null_ptr() -> Self {
        Self {
            kind: core::ptr::null_mut(),
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_boltz_error {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_btc_ln_swap {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            kind: Default::default(),
            network: Default::default(),
            keys: Default::default(),
            key_index: Default::default(),
            preimage: Default::default(),
            swap_script: Default::default(),
            invoice: core::ptr::null_mut(),
            script_address: core::ptr::null_mut(),
            out_amount: Default::default(),
            electrum_url: core::ptr::null_mut(),
            boltz_url: core::ptr::null_mut(),
            referral_id: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_btc_ln_swap {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_btc_swap_script_str {
    fn new_with_null_ptr() -> Self {
        Self {
            swap_type: Default::default(),
            funding_addrs: core::ptr::null_mut(),
            hashlock: core::ptr::null_mut(),
            receiver_pubkey: core::ptr::null_mut(),
            locktime: Default::default(),
            sender_pubkey: core::ptr::null_mut(),
            side: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_btc_swap_script_str {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_chain_fees_and_limits {
    fn new_with_null_ptr() -> Self {
        Self {
            btc_limits: Default::default(),
            lbtc_limits: Default::default(),
            btc_fees: Default::default(),
            lbtc_fees: Default::default(),
        }
    }
}
impl Default for wire_cst_chain_fees_and_limits {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_chain_swap {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            is_testnet: Default::default(),
            direction: Default::default(),
            refund_keys: Default::default(),
            refund_index: Default::default(),
            claim_keys: Default::default(),
            claim_index: Default::default(),
            preimage: Default::default(),
            btc_script_str: Default::default(),
            lbtc_script_str: Default::default(),
            script_address: core::ptr::null_mut(),
            out_amount: Default::default(),
            btc_electrum_url: core::ptr::null_mut(),
            lbtc_electrum_url: core::ptr::null_mut(),
            boltz_url: core::ptr::null_mut(),
            referral_id: core::ptr::null_mut(),
            blinding_key: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_chain_swap {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_chain_swap_fees {
    fn new_with_null_ptr() -> Self {
        Self {
            percentage: Default::default(),
            user_lockup: Default::default(),
            user_claim: Default::default(),
            server: Default::default(),
        }
    }
}
impl Default for wire_cst_chain_swap_fees {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_decoded_invoice {
    fn new_with_null_ptr() -> Self {
        Self {
            msats: Default::default(),
            expiry: Default::default(),
            expires_in: Default::default(),
            expires_at: Default::default(),
            is_expired: Default::default(),
            network: core::ptr::null_mut(),
            cltv_exp_delta: Default::default(),
            bip21: core::ptr::null_mut(),
            preimage_hash: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_decoded_invoice {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_fees {
    fn new_with_null_ptr() -> Self {
        Self {
            boltz_url: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_fees {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_key_pair {
    fn new_with_null_ptr() -> Self {
        Self {
            secret_key: core::ptr::null_mut(),
            public_key: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_key_pair {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_l_btc_swap_script_str {
    fn new_with_null_ptr() -> Self {
        Self {
            swap_type: Default::default(),
            funding_addrs: core::ptr::null_mut(),
            hashlock: core::ptr::null_mut(),
            receiver_pubkey: core::ptr::null_mut(),
            locktime: Default::default(),
            sender_pubkey: core::ptr::null_mut(),
            blinding_key: core::ptr::null_mut(),
            side: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_l_btc_swap_script_str {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_lbtc_ln_swap {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            kind: Default::default(),
            network: Default::default(),
            keys: Default::default(),
            key_index: Default::default(),
            preimage: Default::default(),
            swap_script: Default::default(),
            invoice: core::ptr::null_mut(),
            out_amount: Default::default(),
            script_address: core::ptr::null_mut(),
            blinding_key: core::ptr::null_mut(),
            electrum_url: core::ptr::null_mut(),
            boltz_url: core::ptr::null_mut(),
            referral_id: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_lbtc_ln_swap {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_miner_fees {
    fn new_with_null_ptr() -> Self {
        Self {
            lockup: Default::default(),
            claim: Default::default(),
        }
    }
}
impl Default for wire_cst_miner_fees {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_pre_image {
    fn new_with_null_ptr() -> Self {
        Self {
            value: core::ptr::null_mut(),
            sha256: core::ptr::null_mut(),
            hash160: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_pre_image {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_rev_swap_fees {
    fn new_with_null_ptr() -> Self {
        Self {
            percentage: Default::default(),
            miner_fees: Default::default(),
        }
    }
}
impl Default for wire_cst_rev_swap_fees {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_reverse_fees_and_limits {
    fn new_with_null_ptr() -> Self {
        Self {
            btc_limits: Default::default(),
            lbtc_limits: Default::default(),
            btc_fees: Default::default(),
            lbtc_fees: Default::default(),
        }
    }
}
impl Default for wire_cst_reverse_fees_and_limits {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sub_swap_fees {
    fn new_with_null_ptr() -> Self {
        Self {
            percentage: Default::default(),
            miner_fees: Default::default(),
        }
    }
}
impl Default for wire_cst_sub_swap_fees {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_submarine_fees_and_limits {
    fn new_with_null_ptr() -> Self {
        Self {
            btc_limits: Default::default(),
            lbtc_limits: Default::default(),
            btc_fees: Default::default(),
            lbtc_fees: Default::default(),
        }
    }
}
impl Default for wire_cst_submarine_fees_and_limits {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_swap_limits {
    fn new_with_null_ptr() -> Self {
        Self {
            minimal: Default::default(),
            maximal: Default::default(),
        }
    }
}
impl Default for wire_cst_swap_limits {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_broadcast_boltz(
    port_: i64,
    that: *mut wire_cst_btc_ln_swap,
    signed_hex: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_btc_ln_swap_broadcast_boltz_impl(port_, that, signed_hex)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_broadcast_local(
    port_: i64,
    that: *mut wire_cst_btc_ln_swap,
    signed_hex: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_btc_ln_swap_broadcast_local_impl(port_, that, signed_hex)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_claim(
    port_: i64,
    that: *mut wire_cst_btc_ln_swap,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    abs_fee: u64,
    try_cooperate: bool,
) {
    wire_btc_ln_swap_claim_impl(port_, that, out_address, abs_fee, try_cooperate)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_coop_close_submarine(
    port_: i64,
    that: *mut wire_cst_btc_ln_swap,
) {
    wire_btc_ln_swap_coop_close_submarine_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_new(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
    kind: i32,
    network: i32,
    keys: *mut wire_cst_key_pair,
    key_index: u64,
    preimage: *mut wire_cst_pre_image,
    swap_script: *mut wire_cst_btc_swap_script_str,
    invoice: *mut wire_cst_list_prim_u_8_strict,
    script_address: *mut wire_cst_list_prim_u_8_strict,
    out_amount: u64,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_btc_ln_swap_new_impl(
        port_,
        id,
        kind,
        network,
        keys,
        key_index,
        preimage,
        swap_script,
        invoice,
        script_address,
        out_amount,
        electrum_url,
        boltz_url,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_new_reverse(
    port_: i64,
    mnemonic: *mut wire_cst_list_prim_u_8_strict,
    index: u64,
    out_amount: u64,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    description: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_btc_ln_swap_new_reverse_impl(
        port_,
        mnemonic,
        index,
        out_amount,
        out_address,
        network,
        electrum_url,
        boltz_url,
        description,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_new_submarine(
    port_: i64,
    mnemonic: *mut wire_cst_list_prim_u_8_strict,
    index: u64,
    invoice: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_btc_ln_swap_new_submarine_impl(
        port_,
        mnemonic,
        index,
        invoice,
        network,
        electrum_url,
        boltz_url,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_refund(
    port_: i64,
    that: *mut wire_cst_btc_ln_swap,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    abs_fee: u64,
    try_cooperate: bool,
) {
    wire_btc_ln_swap_refund_impl(port_, that, out_address, abs_fee, try_cooperate)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_ln_swap_tx_size(
    port_: i64,
    that: *mut wire_cst_btc_ln_swap,
) {
    wire_btc_ln_swap_tx_size_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_broadcast_boltz(
    port_: i64,
    that: *mut wire_cst_chain_swap,
    signed_hex: *mut wire_cst_list_prim_u_8_strict,
    kind: i32,
) {
    wire_chain_swap_broadcast_boltz_impl(port_, that, signed_hex, kind)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_broadcast_local(
    port_: i64,
    that: *mut wire_cst_chain_swap,
    signed_hex: *mut wire_cst_list_prim_u_8_strict,
    kind: i32,
) {
    wire_chain_swap_broadcast_local_impl(port_, that, signed_hex, kind)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_claim(
    port_: i64,
    that: *mut wire_cst_chain_swap,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    refund_address: *mut wire_cst_list_prim_u_8_strict,
    abs_fee: u64,
    try_cooperate: bool,
) {
    wire_chain_swap_claim_impl(
        port_,
        that,
        out_address,
        refund_address,
        abs_fee,
        try_cooperate,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_get_server_lockup(
    port_: i64,
    that: *mut wire_cst_chain_swap,
) {
    wire_chain_swap_get_server_lockup_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_get_user_lockup(
    port_: i64,
    that: *mut wire_cst_chain_swap,
) {
    wire_chain_swap_get_user_lockup_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_new(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
    is_testnet: bool,
    direction: i32,
    refund_keys: *mut wire_cst_key_pair,
    refund_index: u64,
    claim_keys: *mut wire_cst_key_pair,
    claim_index: u64,
    preimage: *mut wire_cst_pre_image,
    btc_script_str: *mut wire_cst_btc_swap_script_str,
    lbtc_script_str: *mut wire_cst_l_btc_swap_script_str,
    script_address: *mut wire_cst_list_prim_u_8_strict,
    out_amount: u64,
    btc_electrum_url: *mut wire_cst_list_prim_u_8_strict,
    lbtc_electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
    blinding_key: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_chain_swap_new_impl(
        port_,
        id,
        is_testnet,
        direction,
        refund_keys,
        refund_index,
        claim_keys,
        claim_index,
        preimage,
        btc_script_str,
        lbtc_script_str,
        script_address,
        out_amount,
        btc_electrum_url,
        lbtc_electrum_url,
        boltz_url,
        referral_id,
        blinding_key,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_new_swap(
    port_: i64,
    direction: i32,
    mnemonic: *mut wire_cst_list_prim_u_8_strict,
    index: u64,
    amount: u32,
    is_testnet: bool,
    btc_electrum_url: *mut wire_cst_list_prim_u_8_strict,
    lbtc_electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_chain_swap_new_swap_impl(
        port_,
        direction,
        mnemonic,
        index,
        amount,
        is_testnet,
        btc_electrum_url,
        lbtc_electrum_url,
        boltz_url,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_chain_swap_refund(
    port_: i64,
    that: *mut wire_cst_chain_swap,
    refund_address: *mut wire_cst_list_prim_u_8_strict,
    abs_fee: u64,
    try_cooperate: bool,
) {
    wire_chain_swap_refund_impl(port_, that, refund_address, abs_fee, try_cooperate)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_boltz_error_new(
    port_: i64,
    kind: *mut wire_cst_list_prim_u_8_strict,
    message: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_boltz_error_new_impl(port_, kind, message)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_fees_chain(port_: i64, that: *mut wire_cst_fees) {
    wire_fees_chain_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_fees_new(
    port_: i64,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_fees_new_impl(port_, boltz_url)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_fees_reverse(port_: i64, that: *mut wire_cst_fees) {
    wire_fees_reverse_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_fees_submarine(port_: i64, that: *mut wire_cst_fees) {
    wire_fees_submarine_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_broadcast_boltz(
    port_: i64,
    that: *mut wire_cst_lbtc_ln_swap,
    signed_hex: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_lbtc_ln_swap_broadcast_boltz_impl(port_, that, signed_hex)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_broadcast_local(
    port_: i64,
    that: *mut wire_cst_lbtc_ln_swap,
    signed_hex: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_lbtc_ln_swap_broadcast_local_impl(port_, that, signed_hex)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_claim(
    port_: i64,
    that: *mut wire_cst_lbtc_ln_swap,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    abs_fee: u64,
    try_cooperate: bool,
) {
    wire_lbtc_ln_swap_claim_impl(port_, that, out_address, abs_fee, try_cooperate)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_coop_close_submarine(
    port_: i64,
    that: *mut wire_cst_lbtc_ln_swap,
) {
    wire_lbtc_ln_swap_coop_close_submarine_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_new(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
    kind: i32,
    network: i32,
    keys: *mut wire_cst_key_pair,
    key_index: u64,
    preimage: *mut wire_cst_pre_image,
    swap_script: *mut wire_cst_l_btc_swap_script_str,
    invoice: *mut wire_cst_list_prim_u_8_strict,
    out_amount: u64,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    blinding_key: *mut wire_cst_list_prim_u_8_strict,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_lbtc_ln_swap_new_impl(
        port_,
        id,
        kind,
        network,
        keys,
        key_index,
        preimage,
        swap_script,
        invoice,
        out_amount,
        out_address,
        blinding_key,
        electrum_url,
        boltz_url,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_new_reverse(
    port_: i64,
    mnemonic: *mut wire_cst_list_prim_u_8_strict,
    index: u64,
    out_amount: u64,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    description: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_lbtc_ln_swap_new_reverse_impl(
        port_,
        mnemonic,
        index,
        out_amount,
        out_address,
        network,
        electrum_url,
        boltz_url,
        description,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_new_submarine(
    port_: i64,
    mnemonic: *mut wire_cst_list_prim_u_8_strict,
    index: u64,
    invoice: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_lbtc_ln_swap_new_submarine_impl(
        port_,
        mnemonic,
        index,
        invoice,
        network,
        electrum_url,
        boltz_url,
        referral_id,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_refund(
    port_: i64,
    that: *mut wire_cst_lbtc_ln_swap,
    out_address: *mut wire_cst_list_prim_u_8_strict,
    abs_fee: u64,
    try_cooperate: bool,
) {
    wire_lbtc_ln_swap_refund_impl(port_, that, out_address, abs_fee, try_cooperate)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_lbtc_ln_swap_tx_size(
    port_: i64,
    that: *mut wire_cst_lbtc_ln_swap,
) {
    wire_lbtc_ln_swap_tx_size_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_btc_swap_script_str_new(
    swap_type: i32,
    funding_addrs: *mut wire_cst_list_prim_u_8_strict,
    hashlock: *mut wire_cst_list_prim_u_8_strict,
    receiver_pubkey: *mut wire_cst_list_prim_u_8_strict,
    locktime: u32,
    sender_pubkey: *mut wire_cst_list_prim_u_8_strict,
    side: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_btc_swap_script_str_new_impl(
        swap_type,
        funding_addrs,
        hashlock,
        receiver_pubkey,
        locktime,
        sender_pubkey,
        side,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_decoded_invoice_from_string(
    port_: i64,
    s: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_decoded_invoice_from_string_impl(port_, s, boltz_url)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_invoice_from_lnurl(
    port_: i64,
    lnurl: *mut wire_cst_list_prim_u_8_strict,
    msats: u64,
) {
    wire_invoice_from_lnurl_impl(port_, lnurl, msats)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_key_pair_generate(
    port_: i64,
    mnemonic: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    index: u64,
    swap_type: i32,
) {
    wire_key_pair_generate_impl(port_, mnemonic, network, index, swap_type)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_key_pair_new(
    secret_key: *mut wire_cst_list_prim_u_8_strict,
    public_key: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_key_pair_new_impl(secret_key, public_key)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_l_btc_swap_script_str_new(
    swap_type: i32,
    funding_addrs: *mut wire_cst_list_prim_u_8_strict,
    hashlock: *mut wire_cst_list_prim_u_8_strict,
    receiver_pubkey: *mut wire_cst_list_prim_u_8_strict,
    locktime: u32,
    sender_pubkey: *mut wire_cst_list_prim_u_8_strict,
    blinding_key: *mut wire_cst_list_prim_u_8_strict,
    side: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_l_btc_swap_script_str_new_impl(
        swap_type,
        funding_addrs,
        hashlock,
        receiver_pubkey,
        locktime,
        sender_pubkey,
        blinding_key,
        side,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_pre_image_generate(port_: i64) {
    wire_pre_image_generate_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_pre_image_new(
    value: *mut wire_cst_list_prim_u_8_strict,
    sha256: *mut wire_cst_list_prim_u_8_strict,
    hash160: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_pre_image_new_impl(value, sha256, hash160)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_wire_validate_lnurl(
    port_: i64,
    lnurl: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_validate_lnurl_impl(port_, lnurl)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_btc_ln_swap() -> *mut wire_cst_btc_ln_swap {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_btc_ln_swap::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_btc_swap_script_str(
) -> *mut wire_cst_btc_swap_script_str {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_btc_swap_script_str::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_chain_swap() -> *mut wire_cst_chain_swap {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_chain_swap::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_fees() -> *mut wire_cst_fees {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_fees::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_key_pair() -> *mut wire_cst_key_pair {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_key_pair::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_l_btc_swap_script_str(
) -> *mut wire_cst_l_btc_swap_script_str {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_l_btc_swap_script_str::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_lbtc_ln_swap() -> *mut wire_cst_lbtc_ln_swap
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_lbtc_ln_swap::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_pre_image() -> *mut wire_cst_pre_image {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_pre_image::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_box_autoadd_side(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_boltz_dart_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_boltz_error {
    kind: *mut wire_cst_list_prim_u_8_strict,
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_btc_ln_swap {
    id: *mut wire_cst_list_prim_u_8_strict,
    kind: i32,
    network: i32,
    keys: wire_cst_key_pair,
    key_index: u64,
    preimage: wire_cst_pre_image,
    swap_script: wire_cst_btc_swap_script_str,
    invoice: *mut wire_cst_list_prim_u_8_strict,
    script_address: *mut wire_cst_list_prim_u_8_strict,
    out_amount: u64,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_btc_swap_script_str {
    swap_type: i32,
    funding_addrs: *mut wire_cst_list_prim_u_8_strict,
    hashlock: *mut wire_cst_list_prim_u_8_strict,
    receiver_pubkey: *mut wire_cst_list_prim_u_8_strict,
    locktime: u32,
    sender_pubkey: *mut wire_cst_list_prim_u_8_strict,
    side: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_chain_fees_and_limits {
    btc_limits: wire_cst_swap_limits,
    lbtc_limits: wire_cst_swap_limits,
    btc_fees: wire_cst_chain_swap_fees,
    lbtc_fees: wire_cst_chain_swap_fees,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_chain_swap {
    id: *mut wire_cst_list_prim_u_8_strict,
    is_testnet: bool,
    direction: i32,
    refund_keys: wire_cst_key_pair,
    refund_index: u64,
    claim_keys: wire_cst_key_pair,
    claim_index: u64,
    preimage: wire_cst_pre_image,
    btc_script_str: wire_cst_btc_swap_script_str,
    lbtc_script_str: wire_cst_l_btc_swap_script_str,
    script_address: *mut wire_cst_list_prim_u_8_strict,
    out_amount: u64,
    btc_electrum_url: *mut wire_cst_list_prim_u_8_strict,
    lbtc_electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
    blinding_key: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_chain_swap_fees {
    percentage: f64,
    user_lockup: u64,
    user_claim: u64,
    server: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_decoded_invoice {
    msats: u64,
    expiry: u64,
    expires_in: u64,
    expires_at: u64,
    is_expired: bool,
    network: *mut wire_cst_list_prim_u_8_strict,
    cltv_exp_delta: u64,
    bip21: *mut wire_cst_list_prim_u_8_strict,
    preimage_hash: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_fees {
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_key_pair {
    secret_key: *mut wire_cst_list_prim_u_8_strict,
    public_key: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_l_btc_swap_script_str {
    swap_type: i32,
    funding_addrs: *mut wire_cst_list_prim_u_8_strict,
    hashlock: *mut wire_cst_list_prim_u_8_strict,
    receiver_pubkey: *mut wire_cst_list_prim_u_8_strict,
    locktime: u32,
    sender_pubkey: *mut wire_cst_list_prim_u_8_strict,
    blinding_key: *mut wire_cst_list_prim_u_8_strict,
    side: *mut i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_lbtc_ln_swap {
    id: *mut wire_cst_list_prim_u_8_strict,
    kind: i32,
    network: i32,
    keys: wire_cst_key_pair,
    key_index: u64,
    preimage: wire_cst_pre_image,
    swap_script: wire_cst_l_btc_swap_script_str,
    invoice: *mut wire_cst_list_prim_u_8_strict,
    out_amount: u64,
    script_address: *mut wire_cst_list_prim_u_8_strict,
    blinding_key: *mut wire_cst_list_prim_u_8_strict,
    electrum_url: *mut wire_cst_list_prim_u_8_strict,
    boltz_url: *mut wire_cst_list_prim_u_8_strict,
    referral_id: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_miner_fees {
    lockup: u64,
    claim: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_pre_image {
    value: *mut wire_cst_list_prim_u_8_strict,
    sha256: *mut wire_cst_list_prim_u_8_strict,
    hash160: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_rev_swap_fees {
    percentage: f64,
    miner_fees: wire_cst_miner_fees,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_reverse_fees_and_limits {
    btc_limits: wire_cst_swap_limits,
    lbtc_limits: wire_cst_swap_limits,
    btc_fees: wire_cst_rev_swap_fees,
    lbtc_fees: wire_cst_rev_swap_fees,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sub_swap_fees {
    percentage: f64,
    miner_fees: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_submarine_fees_and_limits {
    btc_limits: wire_cst_swap_limits,
    lbtc_limits: wire_cst_swap_limits,
    btc_fees: wire_cst_sub_swap_fees,
    lbtc_fees: wire_cst_sub_swap_fees,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_swap_limits {
    minimal: u64,
    maximal: u64,
}
